#!/usr/bin/env ruby

require 'marathon_deploy/marathon_defaults'
require 'marathon_deploy/marathon_client'
require 'marathon_deploy/error'
require 'marathon_deploy/application'
require 'marathon_deploy/environment'
require 'marathon_deploy/version'
require 'optparse'
require 'logger'

STDOUT.sync = true
options = {}

# DEFAULTS
DEFAULT_DEPLOYFILE = MarathonDeploy::MarathonDefaults::DEFAULT_DEPLOYFILE
options[:debug] = MarathonDeploy::MarathonDefaults::DEFAULT_LOGLEVEL
options[:environment] = MarathonDeploy::MarathonDefaults::DEFAULT_ENVIRONMENT_NAME
options[:marathon_endpoints] = MarathonDeploy::MarathonDefaults::DEFAULT_PREPRODUCTION_MARATHON_ENDPOINTS
options[:logfile] = MarathonDeploy::MarathonDefaults::DEFAULT_LOGFILE
options[:deployment_timeout] = MarathonDeploy::MarathonDefaults::DEPLOYMENT_TIMEOUT
options[:force] = MarathonDeploy::MarathonDefaults::DEFAULT_FORCE_DEPLOY
options[:noop] = MarathonDeploy::MarathonDefaults::DEFAULT_NOOP
options[:remove_elements] = MarathonDeploy::MarathonDefaults::DEFAULT_REMOVE_ELEMENTS
options[:ignore_preproduction_defaults] = MarathonDeploy::MarathonDefaults::DEFAULT_IGNORE_PREPRODUCTION_DEFAULTS
options[:marathon_username] = nil
options[:marathon_password] = nil


OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.release =  MarathonDeploy::VERSION

  opts.on("-u","--url MARATHON_URL(S)", Array, "Default: #{options[:marathon_endpoints]}") do |u|
    options[:marathon_endpoints] = u
  end

  opts.on("-U","--username USERNAME", "Marathon authentication username") do |u|
    options[:marathon_username] = u
  end

  opts.on("-p","--password PASSWORD", "Marathon authentication password") do |p|
    options[:marathon_password] = p
  end

  opts.on("-l", "--logfile LOGFILE", "Default: STDOUT") do |l|
    options[:logfile] = l
  end

  opts.on("-t", "--timeout SECONDS", "Default: 300") do |l|
    options[:deployment_timeout] = l
  end

  opts.on("-d", "--debug", "Run in debug mode") do |d|
    options[:debug] = Logger::DEBUG
  end

  opts.on("-v", "--version", "Version info") do |v|
    puts "#{$0} version #{opts.release}"
    exit
  end

  opts.on("-f", "--force", "Force deployment when sending same deploy JSON to Marathon") do |f|
    options[:force] = true
  end

  opts.on("-n", "--noop", "No action. Just display what would be performed.") do |f|
    options[:noop] = true
  end

  opts.on("-r", "--remove ELEMENTS", Array, "Remove elemensts from deploymnet plan (example -r :constraints,:healthChecks)") do |r|
    options[:remove_elements] = r
  end

  opts.on("-e", "--environment ENVIRONMENT", "Default: #{options[:environment]}" ) do |e|
    options[:environment] = e
  end

  opts.on("-i", "--ignore-preproduction-defaults", "Default: #{options[:ignore_preproduction_defaults]}" ) do |i|
    options[:ignore_preproduction_defaults] = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    puts "   ----------------- Additional Info -----------------", <<-DESCRIPTION
    * Marathon Env  variables:
      - Env variables with the prefix "#{MarathonDeploy::MarathonDefaults::ENVIRONMENT_VARIABLE_PREFIX}" will be injected into the deployment plan.
      - The prefix "#{MarathonDeploy::MarathonDefaults::ENVIRONMENT_VARIABLE_PREFIX}" will be removed before being added to the marathon json payload.
      - Example:  Env variable #{MarathonDeploy::MarathonDefaults::ENVIRONMENT_VARIABLE_PREFIX}DEBUG=True with be passed as DEBUG=True to the marathon-api.
    * Macros:
      - Marcos in the deploy yaml/json file use the format %%name%%.
      - Macros in the deploy yaml/json file must have a corresponding Env variable with the same name.
      - If any marcos are not defined by Env variables, deployment will fail.
    DESCRIPTION
    exit
  end

end.parse!

abort("Ambiguous arguments: #{ARGV.join(',')}. Only one deploy file argument may be passed.") if (ARGV.length > 1)

argfile = ARGV.pop

if (!argfile.nil?)
  abort("Deploy file \'#{argfile}\' does not exist!") unless(File.file?(argfile))
  deployfile = argfile
elsif (File.file?(DEFAULT_DEPLOYFILE))
  deployfile = DEFAULT_DEPLOYFILE
else
  abort("No deploy file argument provided and default \'#{DEFAULT_DEPLOYFILE}\' does not exist in current directory \'#{Dir.pwd}\'")
end

if options[:marathon_username] and options[:marathon_password]
  MarathonDeploy::MarathonDefaults::marathon_username = options[:marathon_username]
  MarathonDeploy::MarathonDefaults::marathon_password = options[:marathon_password]
end

$LOG = options[:logfile] ? Logger.new(options[:logfile]) : Logger.new(STDOUT)
$LOG.level = options[:debug]

noop = options[:noop]
environment = MarathonDeploy::Environment.new(options[:environment])

marathon_endpoints = Array.new
  if (options[:marathon_endpoints].nil?)
    if (environment.is_production?)
      marathon_endpoints = MarathonDeploy::MarathonDefaults::DEFAULT_PRODUCTION_MARATHON_ENDPOINTS
    else
      marathon_endpoints = MarathonDeploy::MarathonDefaults::DEFAULT_PREPRODUCTION_MARATHON_ENDPOINTS
    end
  else
    marathon_endpoints = options[:marathon_endpoints]
  end

remove_elements = Array.new
  if (options[:remove_elements].nil?)
    remove_elements = MarathonDeploy::MarathonDefaults::DEFAULT_REMOVE_ELEMENTS
  else
    # converts quotes srtings in array to strings
    remove_elements = options[:remove_elements].map do |n|
      eval n if not MarathonDeploy::MarathonDefaults::DEFAULT_KEEP_ELEMENTS.include? n
    end
  end

begin
  application = MarathonDeploy::Application.new(
      :deployfile => deployfile,
      :environment => environment,
      :force => options[:force],
      :remove_elements => remove_elements)
rescue MarathonDeploy::Error::IOError, MarathonDeploy::Error::UndefinedMacroError,MarathonDeploy::Error::MissingMarathonAttributesError,MarathonDeploy::Error::UnsupportedFileExtension  => e
  $LOG.debug(e)
  $LOG.error(e.message)
  exit!
rescue JSON::ParserError => e
  $LOG.debug(e)
  $LOG.error("\'#{deployfile}\' seems to be invalid JSON. Please verify the file.")
  exit!
end

begin
  application.add_envs({ :APPLICATION_NAME => application.id, :ENVIRONMENT => environment})
rescue MarathonDeploy::Error::BadFormatError => e
  $LOG.error(e)
  exit!
end

unless options[:ignore_preproduction_defaults]
  if (!environment.is_production?)
    application.overlay_preproduction_settings
  end
end

display_msg = " MARATHON JSON DEPLOYMENT INSTRUCTIONS "
puts '#' * 50 + display_msg + '#' * 50
puts JSON.pretty_generate(application.json)
puts "#" * (100 + display_msg.length)

# deploy to each marathon endpoint
marathon_endpoints.each do |marathon_url|
  begin
    puts "[NOOP] Sending JSON deployment instructions to marathon endpoint: #{marathon_url}." if (noop)
    next if (noop)
    client = MarathonDeploy::MarathonClient.new(marathon_url, options)
    client.application = application
    client.deploy
  rescue MarathonDeploy::Error::MissingMarathonAttributesError,MarathonDeploy::Error::BadURLError, Timeout::Error => e
    $LOG.error(e.message)
    exit!
  rescue MarathonDeploy::Error::DeploymentError => e
    $LOG.error("Deployment of #{application} failed => #{e}")
    exit!
  rescue SocketError, MarathonDeploy::Error::MarathonError => e
    $LOG.error("Problem talking to marathon endpoint => #{marathon_url} (#{e.message})")
    exit!
  end

end

puts "[NOOP] Deployment completed." if (noop)
